#pragma once

#include <cstdint>

namespace schema {
    namespace CAttributeContainer {
        constexpr std::uint16_t m_Item = 0x68; // C_EconItemView (192 bytes)
    }
    namespace CBasePlayerController {
        constexpr std::uint16_t m_nFinalPredictedTick = 0x530; // int32 (4 bytes)
        constexpr std::uint16_t m_CommandContext = 0x538; // C_CommandContext (120 bytes)
        constexpr std::uint16_t m_nInButtonsWhichAreToggles = 0x5b0; // uint64 (8 bytes)
        constexpr std::uint16_t m_nTickBase = 0x5b8; // uint32 (4 bytes)
        // NetworkChangeCallback: OnPawnChanged
        constexpr std::uint16_t m_hPawn = 0x5bc; // CHandle< C_BasePlayerPawn > (4 bytes)
        constexpr std::uint16_t m_hPredictedPawn = 0x5c0; // CHandle< C_BasePlayerPawn > (4 bytes)
        constexpr std::uint16_t m_nSplitScreenSlot = 0x5c4; // CSplitScreenSlot (4 bytes)
        constexpr std::uint16_t m_hSplitOwner = 0x5c8; // CHandle< CBasePlayerController > (4 bytes)
        constexpr std::uint16_t m_hSplitScreenPlayers = 0x5d0; // CUtlVector< CHandle< CBasePlayerController > > (24 bytes)
        constexpr std::uint16_t m_bIsHLTV = 0x5e8; // bool (1 bytes)
        // NetworkChangeCallback: OnConnectionStateChanged
        constexpr std::uint16_t m_iConnected = 0x5ec; // PlayerConnectedState (4 bytes)
        // NetworkChangeCallback: OnPlayerControllerNameChanged
        constexpr std::uint16_t m_iszPlayerName = 0x5f0; // char[128] (128 bytes)
        // NetworkChangeCallback: OnSteamIDChanged
        constexpr std::uint16_t m_steamID = 0x678; // uint64 (8 bytes)
        constexpr std::uint16_t m_bIsLocalPlayerController = 0x680; // bool (1 bytes)
        constexpr std::uint16_t m_iDesiredFOV = 0x684; // uint32 (4 bytes)
    }
    namespace CGameSceneNode {
        constexpr std::uint16_t m_nodeToWorld = 0x10; // CTransform (32 bytes)
        constexpr std::uint16_t m_pOwner = 0x30; // CEntityInstance* (8 bytes)
        constexpr std::uint16_t m_pParent = 0x38; // CGameSceneNode* (8 bytes)
        constexpr std::uint16_t m_pChild = 0x40; // CGameSceneNode* (8 bytes)
        constexpr std::uint16_t m_pNextSibling = 0x48; // CGameSceneNode* (8 bytes)
        // NetworkChangeCallback: gameSceneNodeHierarchyParentChanged
        constexpr std::uint16_t m_hParent = 0x70; // CGameSceneNodeHandle (16 bytes)
        // NetworkChangeCallback: gameSceneNodeLocalOriginChanged
        constexpr std::uint16_t m_vecOrigin = 0x80; // CNetworkOriginCellCoordQuantizedVector (48 bytes)
        // NetworkChangeCallback: gameSceneNodeLocalAnglesChanged
        constexpr std::uint16_t m_angRotation = 0xb8; // QAngle (12 bytes)
        // NetworkChangeCallback: gameSceneNodeLocalScaleChanged
        constexpr std::uint16_t m_flScale = 0xc4; // float32 (4 bytes)
        constexpr std::uint16_t m_vecAbsOrigin = 0xc8; // Vector (12 bytes)
        constexpr std::uint16_t m_angAbsRotation = 0xd4; // QAngle (12 bytes)
        constexpr std::uint16_t m_flAbsScale = 0xe0; // float32 (4 bytes)
        constexpr std::uint16_t m_nParentAttachmentOrBone = 0xe4; // int16 (2 bytes)
        constexpr std::uint16_t m_bDebugAbsOriginChanges = 0xe6; // bool (1 bytes)
        constexpr std::uint16_t m_bDormant = 0xe7; // bool (1 bytes)
        constexpr std::uint16_t m_bForceParentToBeNetworked = 0xe8; // bool (1 bytes)
        constexpr std::uint16_t m_nHierarchicalDepth = 0xeb; // uint8 (1 bytes)
        constexpr std::uint16_t m_nHierarchyType = 0xec; // uint8 (1 bytes)
        constexpr std::uint16_t m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xed; // uint8 (1 bytes)
        constexpr std::uint16_t m_name = 0xf0; // CUtlStringToken (4 bytes)
        // NetworkChangeCallback: gameSceneNodeHierarchyAttachmentChanged
        constexpr std::uint16_t m_hierarchyAttachName = 0x130; // CUtlStringToken (4 bytes)
        constexpr std::uint16_t m_flZOffset = 0x134; // float32 (4 bytes)
        constexpr std::uint16_t m_vRenderOrigin = 0x138; // Vector (12 bytes)
    }
    namespace CPlayer_CameraServices {
        constexpr std::uint16_t m_iFOV = 0x40; // uint32 (4 bytes)
        constexpr std::uint16_t m_iFOVStart = 0x44; // uint32 (4 bytes)
        constexpr std::uint16_t m_flFOVTime = 0x48; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flFOVRate = 0x4c; // float32 (4 bytes)
        constexpr std::uint16_t m_hZoomOwner = 0x50; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_PlayerFog = 0x58; // C_fogplayerparams_t (64 bytes)
        constexpr std::uint16_t m_hColorCorrectionCtrl = 0x98; // CHandle< C_ColorCorrection > (4 bytes)
        constexpr std::uint16_t m_hViewEntity = 0x9c; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hTonemapController = 0xa0; // CHandle< C_TonemapController2 > (4 bytes)
        constexpr std::uint16_t m_audio = 0xa8; // audioparams_t (120 bytes)
        constexpr std::uint16_t m_PostProcessingVolumes = 0x120; // C_NetworkUtlVectorBase< CHandle< C_PostProcessingVolume > > (24 bytes)
        constexpr std::uint16_t m_flOldPlayerZ = 0x138; // float32 (4 bytes)
        constexpr std::uint16_t m_flOldPlayerViewOffsetZ = 0x13c; // float32 (4 bytes)
        constexpr std::uint16_t m_CurrentFog = 0x140; // fogparams_t (104 bytes)
        constexpr std::uint16_t m_hOldFogController = 0x1a8; // CHandle< C_FogController > (4 bytes)
        constexpr std::uint16_t m_bOverrideFogColor = 0x1ac; // bool[5] (5 bytes)
        constexpr std::uint16_t m_OverrideFogColor = 0x1b1; // Color[5] (20 bytes)
        constexpr std::uint16_t m_bOverrideFogStartEnd = 0x1c5; // bool[5] (5 bytes)
        constexpr std::uint16_t m_fOverrideFogStart = 0x1cc; // float32[5] (20 bytes)
        constexpr std::uint16_t m_fOverrideFogEnd = 0x1e0; // float32[5] (20 bytes)
        constexpr std::uint16_t m_hActivePostProcessingVolume = 0x1f4; // CHandle< C_PostProcessingVolume > (4 bytes)
        constexpr std::uint16_t m_angDemoViewAngles = 0x1f8; // QAngle (12 bytes)
    }
    namespace CSkeletonInstance {
        constexpr std::uint16_t m_modelState = 0x160; // CModelState (560 bytes)
        constexpr std::uint16_t m_bIsAnimationEnabled = 0x390; // bool (1 bytes)
        constexpr std::uint16_t m_bUseParentRenderBounds = 0x391; // bool (1 bytes)
        constexpr std::uint16_t m_bDisableSolidCollisionsForHierarchy = 0x392; // bool (1 bytes)
        // NetworkChangeCallback: skeletonMaterialGroupChanged
        constexpr std::uint16_t m_materialGroup = 0x394; // CUtlStringToken (4 bytes)
        constexpr std::uint16_t m_nHitboxSet = 0x398; // uint8 (1 bytes)
    }
    namespace C_BaseCombatCharacter {
        // NetworkChangeCallback: OnWearablesChanged
        constexpr std::uint16_t m_hMyWearables = 0x950; // C_NetworkUtlVectorBase< CHandle< C_EconWearable > > (24 bytes)
        constexpr std::uint16_t m_bloodColor = 0x968; // int32 (4 bytes)
        constexpr std::uint16_t m_leftFootAttachment = 0x96c; // AttachmentHandle_t (1 bytes)
        constexpr std::uint16_t m_rightFootAttachment = 0x96d; // AttachmentHandle_t (1 bytes)
        constexpr std::uint16_t m_nWaterWakeMode = 0x970; // C_BaseCombatCharacter::WaterWakeMode_t (4 bytes)
        constexpr std::uint16_t m_flWaterWorldZ = 0x974; // float32 (4 bytes)
        constexpr std::uint16_t m_flWaterNextTraceTime = 0x978; // float32 (4 bytes)
        constexpr std::uint16_t m_flFieldOfView = 0x97c; // float32 (4 bytes)
    }
    namespace C_BaseEntity {
        constexpr std::uint16_t m_CBodyComponent = 0x30; // CBodyComponent* (8 bytes)
        constexpr std::uint16_t m_NetworkTransmitComponent = 0x38; // CNetworkTransmitComponent (416 bytes)
        constexpr std::uint16_t m_nLastThinkTick = 0x2f8; // GameTick_t (4 bytes)
        constexpr std::uint16_t m_pGameSceneNode = 0x300; // CGameSceneNode* (8 bytes)
        constexpr std::uint16_t m_pRenderComponent = 0x308; // CRenderComponent* (8 bytes)
        constexpr std::uint16_t m_pCollision = 0x310; // CCollisionProperty* (8 bytes)
        constexpr std::uint16_t m_iMaxHealth = 0x318; // int32 (4 bytes)
        constexpr std::uint16_t m_iHealth = 0x31c; // int32 (4 bytes)
        constexpr std::uint16_t m_lifeState = 0x320; // uint8 (1 bytes)
        constexpr std::uint16_t m_takedamage = 0x321; // DamageOptions_t (1 bytes)
        constexpr std::uint16_t m_bTakesDamage = 0x322; // bool (1 bytes)
        constexpr std::uint16_t m_nTakeDamageFlags = 0x324; // TakeDamageFlags_t (4 bytes)
        // NetworkChangeCallback: OnInterpolationFrameChanged
        constexpr std::uint16_t m_ubInterpolationFrame = 0x328; // uint8 (1 bytes)
        constexpr std::uint16_t m_hSceneObjectController = 0x32c; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_nNoInterpolationTick = 0x330; // int32 (4 bytes)
        constexpr std::uint16_t m_nVisibilityNoInterpolationTick = 0x334; // int32 (4 bytes)
        constexpr std::uint16_t m_flProxyRandomValue = 0x338; // float32 (4 bytes)
        constexpr std::uint16_t m_iEFlags = 0x33c; // int32 (4 bytes)
        constexpr std::uint16_t m_nWaterType = 0x340; // uint8 (1 bytes)
        constexpr std::uint16_t m_bInterpolateEvenWithNoModel = 0x341; // bool (1 bytes)
        constexpr std::uint16_t m_bPredictionEligible = 0x342; // bool (1 bytes)
        constexpr std::uint16_t m_bApplyLayerMatchIDToModel = 0x343; // bool (1 bytes)
        constexpr std::uint16_t m_tokLayerMatchID = 0x344; // CUtlStringToken (4 bytes)
        // NetworkChangeCallback: OnSubclassIDChanged
        constexpr std::uint16_t m_nSubclassID = 0x348; // CUtlStringToken (4 bytes)
        constexpr std::uint16_t m_nSimulationTick = 0x358; // int32 (4 bytes)
        constexpr std::uint16_t m_iCurrentThinkContext = 0x35c; // int32 (4 bytes)
        constexpr std::uint16_t m_aThinkFunctions = 0x360; // CUtlVector< thinkfunc_t > (24 bytes)
        // NetworkChangeCallback: OnAnimTimeChanged
        constexpr std::uint16_t m_flAnimTime = 0x378; // float32 (4 bytes)
        // NetworkChangeCallback: OnSimulationTimeChanged
        constexpr std::uint16_t m_flSimulationTime = 0x37c; // float32 (4 bytes)
        constexpr std::uint16_t m_nSceneObjectOverrideFlags = 0x380; // uint8 (1 bytes)
        constexpr std::uint16_t m_bHasSuccessfullyInterpolated = 0x381; // bool (1 bytes)
        constexpr std::uint16_t m_bHasAddedVarsToInterpolation = 0x382; // bool (1 bytes)
        constexpr std::uint16_t m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x383; // bool (1 bytes)
        constexpr std::uint16_t m_nInterpolationLatchDirtyFlags = 0x384; // int32[2] (8 bytes)
        constexpr std::uint16_t m_ListEntry = 0x38c; // uint16[11] (22 bytes)
        constexpr std::uint16_t m_flCreateTime = 0x3a4; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flSpeed = 0x3a8; // float32 (4 bytes)
        constexpr std::uint16_t m_EntClientFlags = 0x3ac; // uint16 (2 bytes)
        constexpr std::uint16_t m_bClientSideRagdoll = 0x3ae; // bool (1 bytes)
        // NetworkChangeCallback: OnNetVarTeamNumChanged
        constexpr std::uint16_t m_iTeamNum = 0x3af; // uint8 (1 bytes)
        constexpr std::uint16_t m_spawnflags = 0x3b0; // uint32 (4 bytes)
        constexpr std::uint16_t m_nNextThinkTick = 0x3b4; // GameTick_t (4 bytes)
        constexpr std::uint16_t m_fFlags = 0x3b8; // uint32 (4 bytes)
        constexpr std::uint16_t m_vecAbsVelocity = 0x3bc; // Vector (12 bytes)
        // NetworkChangeCallback: OnLocalVelocityChanged
        constexpr std::uint16_t m_vecVelocity = 0x3c8; // CNetworkVelocityVector (40 bytes)
        constexpr std::uint16_t m_hEffectEntity = 0x3f8; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hOwnerEntity = 0x3fc; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_MoveCollide = 0x400; // MoveCollide_t (1 bytes)
        // NetworkChangeCallback: OnMoveTypeChanged
        constexpr std::uint16_t m_MoveType = 0x401; // MoveType_t (1 bytes)
        // NetworkChangeCallback: OnWaterLevelChangeNetworked
        constexpr std::uint16_t m_flWaterLevel = 0x404; // float32 (4 bytes)
        // NetworkChangeCallback: OnEffectsChanged
        constexpr std::uint16_t m_fEffects = 0x408; // uint32 (4 bytes)
        constexpr std::uint16_t m_hGroundEntity = 0x40c; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_flFriction = 0x410; // float32 (4 bytes)
        constexpr std::uint16_t m_flElasticity = 0x414; // float32 (4 bytes)
        constexpr std::uint16_t m_flGravityScale = 0x418; // float32 (4 bytes)
        constexpr std::uint16_t m_flTimeScale = 0x41c; // float32 (4 bytes)
        // NetworkChangeCallback: OnInterpolationAmountChanged
        constexpr std::uint16_t m_bSimulatedEveryTick = 0x420; // bool (1 bytes)
        // NetworkChangeCallback: OnInterpolationAmountChanged
        constexpr std::uint16_t m_bAnimatedEveryTick = 0x421; // bool (1 bytes)
        constexpr std::uint16_t m_nMinCPULevel = 0x422; // uint8 (1 bytes)
        constexpr std::uint16_t m_nMaxCPULevel = 0x423; // uint8 (1 bytes)
        constexpr std::uint16_t m_nMinGPULevel = 0x424; // uint8 (1 bytes)
        constexpr std::uint16_t m_nMaxGPULevel = 0x425; // uint8 (1 bytes)
        // NetworkChangeCallback: OnNavIgnoreChanged
        constexpr std::uint16_t m_flNavIgnoreUntilTime = 0x428; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_hThink = 0x42c; // uint16 (2 bytes)
        constexpr std::uint16_t m_fBBoxVisFlags = 0x438; // uint8 (1 bytes)
        constexpr std::uint16_t m_bPredictable = 0x439; // bool (1 bytes)
        constexpr std::uint16_t m_bRenderWithViewModels = 0x43a; // bool (1 bytes)
        constexpr std::uint16_t m_nSplitUserPlayerPredictionSlot = 0x43c; // CSplitScreenSlot (4 bytes)
        constexpr std::uint16_t m_nFirstPredictableCommand = 0x440; // int32 (4 bytes)
        constexpr std::uint16_t m_nLastPredictableCommand = 0x444; // int32 (4 bytes)
        constexpr std::uint16_t m_hOldMoveParent = 0x448; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_Particles = 0x450; // CParticleProperty (40 bytes)
        constexpr std::uint16_t m_vecPredictedScriptFloats = 0x478; // CUtlVector< float32 > (24 bytes)
        constexpr std::uint16_t m_vecPredictedScriptFloatIDs = 0x490; // CUtlVector< int32 > (24 bytes)
        constexpr std::uint16_t m_nNextScriptVarRecordID = 0x4c0; // int32 (4 bytes)
        constexpr std::uint16_t m_vecAngVelocity = 0x4d0; // QAngle (12 bytes)
        constexpr std::uint16_t m_DataChangeEventRef = 0x4dc; // int32 (4 bytes)
        constexpr std::uint16_t m_dependencies = 0x4e0; // CUtlVector< CEntityHandle > (24 bytes)
        constexpr std::uint16_t m_nCreationTick = 0x4f8; // int32 (4 bytes)
        constexpr std::uint16_t m_bAnimTimeChanged = 0x511; // bool (1 bytes)
        constexpr std::uint16_t m_bSimulationTimeChanged = 0x512; // bool (1 bytes)
        constexpr std::uint16_t m_sUniqueHammerID = 0x520; // CUtlString (8 bytes)
    }
    namespace C_BaseModelEntity {
        constexpr std::uint16_t m_CRenderComponent = 0x528; // CRenderComponent* (8 bytes)
        constexpr std::uint16_t m_CHitboxComponent = 0x530; // CHitboxComponent (40 bytes)
        constexpr std::uint16_t m_bInitModelEffects = 0x578; // bool (1 bytes)
        constexpr std::uint16_t m_bIsStaticProp = 0x579; // bool (1 bytes)
        constexpr std::uint16_t m_iViewerID = 0x57c; // int32 (4 bytes)
        constexpr std::uint16_t m_iTeamVisibilityBitmask = 0x580; // int32 (4 bytes)
        constexpr std::uint16_t m_nLastAddDecal = 0x584; // int32 (4 bytes)
        constexpr std::uint16_t m_nDecalsAdded = 0x588; // int32 (4 bytes)
        constexpr std::uint16_t m_iOldHealth = 0x58c; // int32 (4 bytes)
        // NetworkChangeCallback: OnRenderModeChanged
        constexpr std::uint16_t m_nRenderMode = 0x590; // RenderMode_t (1 bytes)
        constexpr std::uint16_t m_bVisibilityDirtyFlag = 0x591; // bool (1 bytes)
        constexpr std::uint16_t m_nRenderFX = 0x592; // RenderFx_t (1 bytes)
        constexpr std::uint16_t m_bAllowFadeInView = 0x593; // bool (1 bytes)
        // NetworkChangeCallback: OnColorChanged
        constexpr std::uint16_t m_clrRender = 0x594; // Color (4 bytes)
        // NetworkChangeCallback: OnRenderAttributesChanged
        constexpr std::uint16_t m_vecRenderAttributes = 0x598; // C_UtlVectorEmbeddedNetworkVar< EntityRenderAttribute_t > (80 bytes)
        // NetworkChangeCallback: OnLightGroupChanged
        constexpr std::uint16_t m_LightGroup = 0x600; // CUtlStringToken (4 bytes)
        constexpr std::uint16_t m_bRenderToCubemaps = 0x604; // bool (1 bytes)
        constexpr std::uint16_t m_Collision = 0x608; // CCollisionProperty (176 bytes)
        constexpr std::uint16_t m_Glow = 0x6b8; // CGlowProperty (88 bytes)
        constexpr std::uint16_t m_flGlowBackfaceMult = 0x710; // float32 (4 bytes)
        constexpr std::uint16_t m_fadeMinDist = 0x714; // float32 (4 bytes)
        constexpr std::uint16_t m_fadeMaxDist = 0x718; // float32 (4 bytes)
        constexpr std::uint16_t m_flFadeScale = 0x71c; // float32 (4 bytes)
        constexpr std::uint16_t m_flShadowStrength = 0x720; // float32 (4 bytes)
        constexpr std::uint16_t m_nObjectCulling = 0x724; // uint8 (1 bytes)
        constexpr std::uint16_t m_nAddDecal = 0x728; // int32 (4 bytes)
        constexpr std::uint16_t m_vDecalPosition = 0x72c; // Vector (12 bytes)
        constexpr std::uint16_t m_vDecalForwardAxis = 0x738; // Vector (12 bytes)
        constexpr std::uint16_t m_flDecalHealBloodRate = 0x744; // float32 (4 bytes)
        constexpr std::uint16_t m_flDecalHealHeightRate = 0x748; // float32 (4 bytes)
        constexpr std::uint16_t m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x750; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > > (24 bytes)
        // NetworkChangeCallback: OnViewOffsetChanged
        constexpr std::uint16_t m_vecViewOffset = 0x768; // CNetworkViewOffsetVector (40 bytes)
        constexpr std::uint16_t m_pClientAlphaProperty = 0x798; // CClientAlphaProperty* (8 bytes)
        constexpr std::uint16_t m_ClientOverrideTint = 0x7a0; // Color (4 bytes)
        constexpr std::uint16_t m_bUseClientOverrideTint = 0x7a4; // bool (1 bytes)
    }
    namespace C_BasePlayerPawn {
        constexpr std::uint16_t m_pWeaponServices = 0x9e0; // CPlayer_WeaponServices* (8 bytes)
        constexpr std::uint16_t m_pItemServices = 0x9e8; // CPlayer_ItemServices* (8 bytes)
        constexpr std::uint16_t m_pAutoaimServices = 0x9f0; // CPlayer_AutoaimServices* (8 bytes)
        constexpr std::uint16_t m_pObserverServices = 0x9f8; // CPlayer_ObserverServices* (8 bytes)
        constexpr std::uint16_t m_pWaterServices = 0xa00; // CPlayer_WaterServices* (8 bytes)
        constexpr std::uint16_t m_pUseServices = 0xa08; // CPlayer_UseServices* (8 bytes)
        constexpr std::uint16_t m_pFlashlightServices = 0xa10; // CPlayer_FlashlightServices* (8 bytes)
        constexpr std::uint16_t m_pCameraServices = 0xa18; // CPlayer_CameraServices* (8 bytes)
        constexpr std::uint16_t m_pMovementServices = 0xa20; // CPlayer_MovementServices* (8 bytes)
        constexpr std::uint16_t v_angle = 0xa30; // QAngle (12 bytes)
        constexpr std::uint16_t m_iHideHUD = 0xa3c; // uint32 (4 bytes)
        constexpr std::uint16_t m_skybox3d = 0xa40; // sky3dparams_t (144 bytes)
        constexpr std::uint16_t m_flDeathTime = 0xad0; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_vecPredictionError = 0xad4; // Vector (12 bytes)
        constexpr std::uint16_t m_flPredictionErrorTime = 0xae0; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flFOVSensitivityAdjust = 0xae4; // float32 (4 bytes)
        constexpr std::uint16_t m_flMouseSensitivity = 0xae8; // float32 (4 bytes)
        constexpr std::uint16_t m_vOldOrigin = 0xaec; // Vector (12 bytes)
        constexpr std::uint16_t m_flOldSimulationTime = 0xaf8; // float32 (4 bytes)
        constexpr std::uint16_t m_nLastExecutedCommandNumber = 0xafc; // int32 (4 bytes)
        constexpr std::uint16_t m_nLastExecutedCommandTick = 0xb00; // int32 (4 bytes)
        // NetworkChangeCallback: OnControllerChanged
        constexpr std::uint16_t m_hController = 0xb04; // CHandle< CBasePlayerController > (4 bytes)
        constexpr std::uint16_t m_bIsSwappingToPredictableController = 0xb08; // bool (1 bytes)
    }
    namespace C_DOTAGamerules {
        constexpr std::uint16_t __m_pChainEntity = 0x8; // CNetworkVarChainer (40 bytes)
        constexpr std::uint16_t m_nTotalPausedTicks = 0x30; // int32 (4 bytes)
        constexpr std::uint16_t m_nPauseStartTick = 0x34; // int32 (4 bytes)
        constexpr std::uint16_t m_bGamePaused = 0x38; // bool (1 bytes)
        constexpr std::uint16_t m_iMiscHeroPickCounter = 0x3c; // int32 (4 bytes)
        constexpr std::uint16_t m_hEndGameCinematicEntity = 0x40; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hOverlayHealthBarUnit = 0x44; // CHandle< C_DOTA_BaseNPC > (4 bytes)
        constexpr std::uint16_t m_nOverlayHealthBarType = 0x48; // int32 (4 bytes)
        // NetworkChangeCallback: OnCinematicModeChanged
        constexpr std::uint16_t m_bIsInCinematicMode = 0x4c; // bool (1 bytes)
        constexpr std::uint16_t m_bIsInClientSideCinematicMode = 0x4d; // bool (1 bytes)
        constexpr std::uint16_t m_bFreeCourierMode = 0x4e; // bool (1 bytes)
        constexpr std::uint16_t m_nStartingGold = 0x50; // int32 (4 bytes)
        constexpr std::uint16_t m_nGoldPerTick = 0x54; // int32 (4 bytes)
        constexpr std::uint16_t m_flGoldTickTime = 0x58; // float32 (4 bytes)
        constexpr std::uint16_t m_bItemWhiteListChanged = 0x5c; // bool (1 bytes)
        constexpr std::uint16_t m_bEnableSuggestAbilities = 0x5d; // bool (1 bytes)
        constexpr std::uint16_t m_bEnableSuggestItems = 0x5e; // bool (1 bytes)
        constexpr std::uint16_t m_unFanfareGoodGuys = 0x60; // uint32 (4 bytes)
        constexpr std::uint16_t m_unFanfareBadGuys = 0x64; // uint32 (4 bytes)
        constexpr std::uint16_t m_iMapType = 0x68; // int32 (4 bytes)
        constexpr std::uint16_t m_nServerGameState = 0x6c; // int32 (4 bytes)
        constexpr std::uint16_t m_nServerHeroPickState = 0x70; // DOTA_HeroPickState (4 bytes)
        constexpr std::uint16_t m_nGameState = 0x74; // int32 (4 bytes)
        constexpr std::uint16_t m_nHeroPickState = 0x78; // DOTA_HeroPickState (4 bytes)
        constexpr std::uint16_t m_bAlternateHeroGridsEnabled = 0x7c; // bool (1 bytes)
        constexpr std::uint16_t m_flStateTransitionTime = 0x80; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flOverride_dota_hero_selection_time = 0x84; // float32 (4 bytes)
        constexpr std::uint16_t m_flOverride_dota_pregame_time = 0x88; // float32 (4 bytes)
        constexpr std::uint16_t m_flOverride_dota_postgame_time = 0x8c; // float32 (4 bytes)
        constexpr std::uint16_t m_flOverride_dota_strategy_time = 0x90; // float32 (4 bytes)
        constexpr std::uint16_t m_flOverride_dota_team_showcase_duration = 0x94; // float32 (4 bytes)
        constexpr std::uint16_t m_flOverride_dota_rune_spawn_time = 0x98; // float32 (4 bytes)
        constexpr std::uint16_t m_flShowcaseTime = 0x9c; // float32[15] (60 bytes)
        constexpr std::uint16_t m_flNeutralInitialSpawnOffset = 0xd8; // float32 (4 bytes)
        constexpr std::uint16_t m_iGameMode = 0xdc; // int32 (4 bytes)
        // NetworkChangeCallback: OnGameModeEntityChanged
        constexpr std::uint16_t m_hGameModeEntity = 0xe0; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hCustomHeroPickRulesEntity = 0xe4; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_flHeroPickStateTransitionTime = 0xe8; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_iPlayerIDsInControl = 0xf0; // uint64 (8 bytes)
        constexpr std::uint16_t m_bSameHeroSelectionEnabled = 0xf8; // bool (1 bytes)
        constexpr std::uint16_t m_bUseCustomHeroXPValue = 0xf9; // bool (1 bytes)
        constexpr std::uint16_t m_bUseBaseGoldBountyOnHeroes = 0xfa; // bool (1 bytes)
        constexpr std::uint16_t m_bUseUniversalShopMode = 0xfb; // bool (1 bytes)
        constexpr std::uint16_t m_bHideKillMessageHeaders = 0xfc; // bool (1 bytes)
        constexpr std::uint16_t m_flHeroMinimapIconScale = 0x100; // float32 (4 bytes)
        constexpr std::uint16_t m_flCreepMinimapIconScale = 0x104; // float32 (4 bytes)
        constexpr std::uint16_t m_bCreepSpawningEnabled = 0x108; // bool (1 bytes)
        constexpr std::uint16_t m_flRuneMinimapIconScale = 0x10c; // float32 (4 bytes)
        constexpr std::uint16_t m_CustomVictoryMessage = 0x110; // char[256] (256 bytes)
        constexpr std::uint16_t m_flCustomGameEndDelay = 0x210; // float32 (4 bytes)
        constexpr std::uint16_t m_flCustomGameSetupAutoLaunchDelay = 0x214; // float32 (4 bytes)
        constexpr std::uint16_t m_flCustomGameSetupTimeout = 0x218; // float32 (4 bytes)
        constexpr std::uint16_t m_flCustomVictoryMessageDuration = 0x21c; // float32 (4 bytes)
        constexpr std::uint16_t m_flHeroSelectPenaltyTime = 0x220; // float32 (4 bytes)
        constexpr std::uint16_t m_bCustomGameSetupAutoLaunchEnabled = 0x224; // bool (1 bytes)
        constexpr std::uint16_t m_bCustomGameTeamSelectionLocked = 0x225; // bool (1 bytes)
        constexpr std::uint16_t m_bCustomGameEnablePickRules = 0x226; // bool (1 bytes)
        constexpr std::uint16_t m_bCustomGameAllowHeroPickMusic = 0x227; // bool (1 bytes)
        constexpr std::uint16_t m_bCustomGameAllowMusicAtGameStart = 0x228; // bool (1 bytes)
        constexpr std::uint16_t m_bCustomGameAllowBattleMusic = 0x229; // bool (1 bytes)
        constexpr std::uint16_t m_bCustomGameDisableIK = 0x22a; // bool (1 bytes)
        constexpr std::uint16_t m_bCustomGameAllowSecondaryAbilitiesOnOtherUnits = 0x22b; // bool (1 bytes)
        constexpr std::uint16_t m_iCMModePickBanOrder = 0x22c; // int32 (4 bytes)
        constexpr std::uint16_t m_iCDModePickBanOrder = 0x230; // int32 (4 bytes)
        constexpr std::uint16_t m_nGGTeam = 0x234; // int32 (4 bytes)
        constexpr std::uint16_t m_flGGEndsAtTime = 0x238; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_bGGCalled = 0x23c; // bool (1 bytes)
        constexpr std::uint16_t m_bWhiteListEnabled = 0x23d; // bool (1 bytes)
        // NetworkChangeCallback: OnWhitelistChanged
        constexpr std::uint16_t m_bItemWhiteList = 0x240; // uint64[4] (32 bytes)
        constexpr std::uint16_t m_nLastHitUIMode = 0x260; // int32 (4 bytes)
        constexpr std::uint16_t m_bHUDTimerTutorialMode = 0x264; // bool (1 bytes)
        constexpr std::uint16_t m_HeroPickMiscTimer = 0x268; // CountdownTimer (24 bytes)
        constexpr std::uint16_t m_ExtraTimeTimer = 0x280; // CountdownTimer (24 bytes)
        constexpr std::uint16_t m_fExtraTimeRemaining = 0x298; // float32[2] (8 bytes)
        constexpr std::uint16_t m_bHeroRespawnEnabled = 0x2a0; // bool (1 bytes)
        constexpr std::uint16_t m_bIsRandomingEnabled = 0x2a1; // bool (1 bytes)
        constexpr std::uint16_t m_iCaptainPlayerIDs = 0x2a4; // PlayerID_t[2] (8 bytes)
        constexpr std::uint16_t m_BannedHeroes = 0x2ac; // int32[24] (96 bytes)
        constexpr std::uint16_t m_SelectedHeroes = 0x30c; // int32[24] (96 bytes)
        constexpr std::uint16_t m_iActiveTeam = 0x36c; // int32 (4 bytes)
        constexpr std::uint16_t m_iStartingTeam = 0x370; // int32 (4 bytes)
        constexpr std::uint16_t m_iPenaltyLevelRadiant = 0x374; // int32 (4 bytes)
        constexpr std::uint16_t m_iPenaltyLevelDire = 0x378; // int32 (4 bytes)
        constexpr std::uint16_t m_bIsLoadingScenario = 0x37c; // bool (1 bytes)
        constexpr std::uint16_t m_vecNewBannedHeroes = 0x380; // C_NetworkUtlVectorBase< int32 > (24 bytes)
        constexpr std::uint16_t m_vecWhitelistedHeroes = 0x398; // C_NetworkUtlVectorBase< int32 > (24 bytes)
        constexpr std::uint16_t m_vecBlacklistedHeroes = 0x3b0; // C_NetworkUtlVectorBase< int32 > (24 bytes)
        constexpr std::uint16_t m_bHideBlacklistedHeroes = 0x3c8; // bool (1 bytes)
        constexpr std::uint16_t m_nSeriesType = 0x3cc; // int32 (4 bytes)
        constexpr std::uint16_t m_nRadiantSeriesWins = 0x3d0; // int32 (4 bytes)
        constexpr std::uint16_t m_nDireSeriesWins = 0x3d4; // int32 (4 bytes)
        constexpr std::uint16_t m_vecAvailableHerosPerPlayerID = 0x3d8; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer > (80 bytes)
        constexpr std::uint16_t m_vecLockedHerosByPlayerID = 0x428; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer > (80 bytes)
        constexpr std::uint16_t m_vecDisabledRandomHerosByPlayerID = 0x478; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer > (80 bytes)
        constexpr std::uint16_t m_CustomGameForceSelectHero = 0x4c8; // int32[24] (96 bytes)
        constexpr std::uint16_t m_flGoldTime = 0x528; // float32 (4 bytes)
        constexpr std::uint16_t m_flXPTime = 0x52c; // float32 (4 bytes)
        constexpr std::uint16_t m_flCreepSpawntime = 0x530; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flAnnounceStartTime = 0x534; // float32 (4 bytes)
        constexpr std::uint16_t m_iGoodTomeCount = 0x538; // int32 (4 bytes)
        constexpr std::uint16_t m_iBadTomeCount = 0x53c; // int32 (4 bytes)
        constexpr std::uint16_t m_flPreGameStartTime = 0x540; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flGameStartTime = 0x544; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flGameEndTime = 0x548; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flGameLoadTime = 0x54c; // float32 (4 bytes)
        constexpr std::uint16_t m_iCustomGameScore = 0x550; // int32[2] (8 bytes)
        constexpr std::uint16_t m_nCustomGameDifficulty = 0x558; // int32 (4 bytes)
        constexpr std::uint16_t m_bEnemyModifiersEnabled = 0x55c; // bool (1 bytes)
        constexpr std::uint16_t m_iWaves = 0x560; // int32 (4 bytes)
        constexpr std::uint16_t m_iCreepUpgradeState = 0x564; // int32 (4 bytes)
        constexpr std::uint16_t m_fGoodGlyphCooldown = 0x568; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_fBadGlyphCooldown = 0x56c; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flGlyphCooldowns = 0x570; // GameTime_t[15] (60 bytes)
        constexpr std::uint16_t m_fGoodRadarCooldown = 0x5ac; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_fBadRadarCooldown = 0x5b0; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flRadarCooldowns = 0x5b4; // GameTime_t[15] (60 bytes)
        constexpr std::uint16_t m_flOutpostTimes = 0x5f0; // float32[24] (96 bytes)
        constexpr std::uint16_t m_bIsNightstalkerNight = 0x650; // bool (1 bytes)
        constexpr std::uint16_t m_bIsTemporaryNight = 0x651; // bool (1 bytes)
        constexpr std::uint16_t m_bIsTemporaryDay = 0x652; // bool (1 bytes)
        constexpr std::uint16_t m_nRiverType = 0x654; // int32 (4 bytes)
        constexpr std::uint16_t m_nTeamFeaturedPlayerID = 0x658; // PlayerID_t[15] (60 bytes)
        constexpr std::uint16_t m_nTeamVersusScreen = 0x694; // item_definition_index_t[15] (60 bytes)
        constexpr std::uint16_t m_flGoldRedistributeTime = 0x6d0; // float32 (4 bytes)
        constexpr std::uint16_t m_nGoldToRedistribute = 0x6d4; // int32[2] (8 bytes)
        constexpr std::uint16_t m_flNextPreGameThink = 0x6dc; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flNextAllDraftGoldThink = 0x6e0; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flTimeEnteredState = 0x6e8; // float64 (8 bytes)
        constexpr std::uint16_t m_unRiverAccountID = 0x6f0; // uint32 (4 bytes)
        constexpr std::uint16_t m_ulRiverItemID = 0x6f8; // itemid_t (8 bytes)
        constexpr std::uint16_t m_vecItemStockInfo = 0x740; // C_UtlVectorEmbeddedNetworkVar< CDOTA_ItemStockInfo > (80 bytes)
        constexpr std::uint16_t m_AssassinMiniGameNetData = 0x790; // DOTA_AssassinMinigameNetworkState (16 bytes)
        constexpr std::uint16_t m_nGameWinner = 0x7a0; // int32 (4 bytes)
        constexpr std::uint16_t m_unMatchID64 = 0x7a8; // MatchID_t (8 bytes)
        constexpr std::uint16_t m_bMatchSignoutComplete = 0x7b0; // bool (1 bytes)
        constexpr std::uint16_t m_hSideShop1 = 0x7b4; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hSideShop2 = 0x7b8; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hSecretShop1 = 0x7bc; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hSecretShop2 = 0x7c0; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hTeamFountains = 0x7c4; // CHandle< C_BaseEntity >[15] (60 bytes)
        constexpr std::uint16_t m_hTeamForts = 0x800; // CHandle< C_BaseEntity >[15] (60 bytes)
        constexpr std::uint16_t m_hTeamShops = 0x83c; // CHandle< C_BaseEntity >[15] (60 bytes)
        constexpr std::uint16_t m_hAnnouncerGood = 0x878; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hAnnouncerBad = 0x87c; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hAnnouncerSpectator = 0x880; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hAnnouncerGood_KillingSpree = 0x884; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hAnnouncerBad_KillingSpree = 0x888; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hAnnouncerSpectator_KillingSpree = 0x88c; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_arrTier1TowerDestroyed = 0x890; // bool[15] (15 bytes)
        constexpr std::uint16_t m_arrTier2TowerDestroyed = 0x89f; // bool[15] (15 bytes)
        constexpr std::uint16_t m_arrTier3TowerDestroyed = 0x8ae; // bool[15] (15 bytes)
        constexpr std::uint16_t m_bTier1TowerDestroyed = 0x8bd; // bool (1 bytes)
        constexpr std::uint16_t m_bTier2TowerDestroyed = 0x8be; // bool (1 bytes)
        constexpr std::uint16_t m_bTier3TowerDestroyed = 0x8bf; // bool (1 bytes)
        constexpr std::uint16_t m_fTimeOfDay = 0x8c0; // float32 (4 bytes)
        constexpr std::uint16_t m_iNetTimeOfDay = 0x8c4; // int32 (4 bytes)
        constexpr std::uint16_t m_nLoadedPlayers = 0x8c8; // int32 (4 bytes)
        constexpr std::uint16_t m_nExpectedPlayers = 0x8cc; // int32 (4 bytes)
        constexpr std::uint16_t m_iMinimapDebugGridState = 0x8d8; // int32 (4 bytes)
        constexpr std::uint16_t m_iFoWFrameNumber = 0x958; // int32 (4 bytes)
        constexpr std::uint16_t m_vWeatherWindDirection = 0x95c; // Vector (12 bytes)
        constexpr std::uint16_t m_vecRequiredPlaytestHeroesStorage = 0x968; // int32[24] (96 bytes)
        constexpr std::uint16_t m_vecRecommendedPlaytestHeroesStorage = 0x9c8; // int32[24] (96 bytes)
        constexpr std::uint16_t m_bAllRequiredPlaytestHeroesPicked = 0xa28; // bool (1 bytes)
        constexpr std::uint16_t m_nLastPlaytestPickPhase = 0xa2c; // int32 (4 bytes)
        constexpr std::uint16_t m_nCustomGameFowTeamCount = 0xa30; // int32 (4 bytes)
        constexpr std::uint16_t m_bUseAlternateABRules = 0xa34; // bool (1 bytes)
        constexpr std::uint16_t m_bLobbyIsAssociatedWithGame = 0xa35; // bool (1 bytes)
        constexpr std::uint16_t m_BotDebugTimer = 0xa38; // CountdownTimer (24 bytes)
        constexpr std::uint16_t m_BotDebugPushLane = 0xa50; // uint8[18] (18 bytes)
        constexpr std::uint16_t m_BotDebugDefendLane = 0xa62; // uint8[18] (18 bytes)
        constexpr std::uint16_t m_BotDebugFarmLane = 0xa74; // uint8[6] (6 bytes)
        constexpr std::uint16_t m_BotDebugRoam = 0xa7a; // uint8[8] (8 bytes)
        constexpr std::uint16_t m_hBotDebugRoamTarget = 0xa84; // CHandle< C_BaseEntity >[2] (8 bytes)
        constexpr std::uint16_t m_BotDebugRoshan = 0xa8c; // uint8[2] (2 bytes)
        constexpr std::uint16_t m_nRoshanRespawnPhase = 0xa90; // ERoshanSpawnPhase (4 bytes)
        constexpr std::uint16_t m_flRoshanRespawnPhaseEndTime = 0xa94; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_AbilityDraftAbilities = 0xa98; // C_UtlVectorEmbeddedNetworkVar< CDOTA_AbilityDraftAbilityState > (80 bytes)
        constexpr std::uint16_t m_bAbilityDraftCurrentPlayerHasPicked = 0xae8; // bool (1 bytes)
        constexpr std::uint16_t m_nAbilityDraftPlayerTracker = 0xaec; // int32 (4 bytes)
        constexpr std::uint16_t m_nAbilityDraftRoundNumber = 0xaf0; // int32 (4 bytes)
        constexpr std::uint16_t m_nAbilityDraftAdvanceSteps = 0xaf4; // int32 (4 bytes)
        constexpr std::uint16_t m_nAbilityDraftPhase = 0xaf8; // int32 (4 bytes)
        // NetworkChangeCallback: OnAbilityDraftHeroesChanged
        constexpr std::uint16_t m_nAbilityDraftHeroesChosen = 0xafc; // int32[13] (52 bytes)
        constexpr std::uint16_t m_bIsPlayerDraft = 0xb30; // bool (1 bytes)
        constexpr std::uint16_t m_ePlayerDraftState = 0xb34; // DOTA_PlayerDraftState (4 bytes)
        constexpr std::uint16_t m_vecPlayerDraftPickOrder = 0xb38; // C_NetworkUtlVectorBase< uint8 > (24 bytes)
        constexpr std::uint16_t m_nPlayerDraftPick = 0xb50; // int32 (4 bytes)
        constexpr std::uint16_t m_nPlayerDraftActiveTeam = 0xb54; // int32 (4 bytes)
        constexpr std::uint16_t m_flPlayerDraftTimeBank = 0xb58; // float32[2] (8 bytes)
        constexpr std::uint16_t m_vecARDMHeroes = 0xb60; // CUtlVector< KeyValues* >[2] (48 bytes)
        constexpr std::uint16_t m_nARDMHeroesPrecached = 0xb90; // int32 (4 bytes)
        constexpr std::uint16_t m_fLastARDMPrecache = 0xb94; // float32 (4 bytes)
        constexpr std::uint16_t m_nAllDraftPhase = 0xb98; // int32 (4 bytes)
        constexpr std::uint16_t m_bAllDraftRadiantFirst = 0xb9c; // bool (1 bytes)
        constexpr std::uint16_t m_bAllowOverrideVPK = 0xb9d; // bool (1 bytes)
        constexpr std::uint16_t m_nARDMHeroesRemaining = 0xba0; // int32[2] (8 bytes)
        constexpr std::uint16_t m_bUpdateHeroStatues = 0xba8; // bool (1 bytes)
        constexpr std::uint16_t m_bExperimentalGameplay = 0xbc0; // bool (1 bytes)
        constexpr std::uint16_t m_vecPlayerMMR = 0xc00; // CUtlVector< int32 > (24 bytes)
        constexpr std::uint16_t m_lobbyType = 0xc18; // uint32 (4 bytes)
        constexpr std::uint16_t m_lobbyLeagueID = 0xc1c; // LeagueID_t (4 bytes)
        constexpr std::uint16_t m_lobbyGameName = 0xc20; // char[256] (256 bytes)
        // NetworkChangeCallback: OnHeroStatueLiked
        constexpr std::uint16_t m_vecHeroStatueLiked = 0xd20; // C_UtlVectorEmbeddedNetworkVar< CHeroStatueLiked > (80 bytes)
        constexpr std::uint16_t m_CustomGameTeamMaxPlayers = 0xd70; // int32[15] (60 bytes)
        constexpr std::uint16_t m_iMutations = 0xdac; // int32[5] (20 bytes)
        constexpr std::uint16_t m_vecIngameEvents = 0xdc0; // C_NetworkUtlVectorBase< CHandle< C_IngameEvent_Base > > (24 bytes)
        constexpr std::uint16_t m_nPrimaryIngameEventIndex = 0xdd8; // int8 (1 bytes)
        // NetworkChangeCallback: OnObsoleteIngameEventChanged
        constexpr std::uint16_t m_hObsoleteIngameEvent = 0xddc; // CHandle< C_IngameEvent_Base > (4 bytes)
        constexpr std::uint16_t m_nOfrendaPledges = 0xde0; // uint32 (4 bytes)
        constexpr std::uint16_t m_nRadiantOfrendas = 0xde4; // uint32 (4 bytes)
        constexpr std::uint16_t m_nDireOfrendas = 0xde8; // uint32 (4 bytes)
        constexpr std::uint16_t m_bOfrendaEnabled = 0xdec; // bool (1 bytes)
        constexpr std::uint16_t m_NeutralSpawnBoxes = 0xe20; // C_NetworkUtlVectorBase< NeutralSpawnBoxes_t > (24 bytes)
        constexpr std::uint16_t m_RegionTriggerBoxes = 0xe38; // C_NetworkUtlVectorBase< RegionTriggerBoxes_t > (24 bytes)
        constexpr std::uint16_t m_flLastPerfSampleTime = 0x1e08; // float64 (8 bytes)
        constexpr std::uint16_t m_flLastPerfSampleSendTime = 0x1e10; // float64 (8 bytes)
        constexpr std::uint16_t m_bDidSeeStrategyTime = 0x1e18; // bool (1 bytes)
        constexpr std::uint16_t m_flLastUnfocusedSleepTime = 0xab70; // float64 (8 bytes)
    }
    namespace C_DOTAGamerulesProxy {
        constexpr std::uint16_t m_pGameRules = 0x528; // C_DOTAGamerules* (8 bytes)
    }
    namespace C_DOTAPlayerController {
        constexpr std::uint16_t m_iMinimapMove = 0x728; // int32 (4 bytes)
        constexpr std::uint16_t m_pClickBehaviorKeys = 0x730; // KeyValues* (8 bytes)
        constexpr std::uint16_t m_flCenterTime = 0x738; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_iConfirmationIndex = 0x73c; // int32 (4 bytes)
        constexpr std::uint16_t m_bCenterOnHero = 0x740; // bool (1 bytes)
        constexpr std::uint16_t m_bHeroAssigned = 0x741; // bool (1 bytes)
        constexpr std::uint16_t m_nKeyBindHeroID = 0x744; // int32 (4 bytes)
        constexpr std::uint16_t m_bUsingCameraMan = 0x748; // bool (1 bytes)
        constexpr std::uint16_t m_bUsingAssistedCameraOperator = 0x749; // bool (1 bytes)
        constexpr std::uint16_t m_nPlayerAssistFlags = 0x74c; // int32 (4 bytes)
        constexpr std::uint16_t m_vLatestEvent = 0x750; // Vector (12 bytes)
        constexpr std::uint16_t m_hFreeDrawAbility = 0x780; // CHandle< C_DOTABaseAbility > (4 bytes)
        constexpr std::uint16_t m_vLastFreeDrawPosition = 0x784; // Vector (12 bytes)
        // NetworkChangeCallback: OnPlayerIDChanged
        constexpr std::uint16_t m_nPlayerID = 0x790; // PlayerID_t (4 bytes)
        constexpr std::uint16_t m_hAssignedHero = 0x794; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hLastAssignedHero = 0x798; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hKillCamUnit = 0x79c; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hPreviousKillCamUnit = 0x7a0; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_flKillCamUnitReceivedTime = 0x7a4; // float32 (4 bytes)
        constexpr std::uint16_t m_nRareLineClickCount = 0x7b0; // int32 (4 bytes)
        constexpr std::uint16_t m_nRareLinesPlayed = 0x7b4; // int32 (4 bytes)
        constexpr std::uint16_t m_nRareLineGroup = 0x7b8; // int32 (4 bytes)
        constexpr std::uint16_t m_flLastRareLinePlayTime = 0x7bc; // float32 (4 bytes)
        constexpr std::uint16_t m_flNextUnitOrdersTime = 0x7c0; // float32 (4 bytes)
        constexpr std::uint16_t m_bTeleportRequiresHalt = 0x7c4; // bool (1 bytes)
        constexpr std::uint16_t m_bChannelRequiresHalt = 0x7c5; // bool (1 bytes)
        constexpr std::uint16_t m_bAutoPurchaseItems = 0x7c6; // bool (1 bytes)
        constexpr std::uint16_t m_bDisableHUDErrorMessages = 0x7c7; // bool (1 bytes)
        constexpr std::uint16_t m_iMouseDragStartX = 0x7c8; // int32 (4 bytes)
        constexpr std::uint16_t m_iMouseDragStartY = 0x7cc; // int32 (4 bytes)
        constexpr std::uint16_t m_nWeatherType = 0x7d0; // int32 (4 bytes)
        constexpr std::uint16_t m_bDynamicWeatherSystemActive = 0x7d4; // bool (1 bytes)
        constexpr std::uint16_t m_bDynamicSoundHandled = 0x7d5; // bool (1 bytes)
        constexpr std::uint16_t m_flDynamicWeatherNextSwitchTime = 0x7d8; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flDynamicWeatherScaleFinishedTime = 0x7dc; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flDynamicWeatherIntensity = 0x7e0; // float32 (4 bytes)
        constexpr std::uint16_t m_nXPRangeFXIndex = 0x7e4; // ParticleIndex_t (4 bytes)
        constexpr std::uint16_t m_nVisionRangeFXIndex = 0x7e8; // ParticleIndex_t (4 bytes)
        constexpr std::uint16_t m_nSelectedControlGroup = 0x7ec; // int32 (4 bytes)
        constexpr std::uint16_t m_nCachedCoachedTeam = 0x7f0; // int32 (4 bytes)
        constexpr std::uint16_t m_hActiveAbility = 0x7f4; // CHandle< C_DOTABaseAbility > (4 bytes)
        constexpr std::uint16_t m_unitorders = 0x7f8; // CUtlVector< CUnitOrders > (24 bytes)
        constexpr std::uint16_t m_nOutgoingOrderSequenceNumber = 0x810; // int32 (4 bytes)
        constexpr std::uint16_t m_nServerOrderSequenceNumber = 0x814; // int32 (4 bytes)
        constexpr std::uint16_t m_nSelectedUnits = 0x818; // CUtlVector< CEntityIndex > (24 bytes)
        constexpr std::uint16_t m_nWaypoints = 0x830; // CUtlVector< ParticleIndex_t > (24 bytes)
        constexpr std::uint16_t m_iActions = 0x848; // int32 (4 bytes)
        constexpr std::uint16_t m_hQueryUnit = 0x84c; // CHandle< C_DOTA_BaseNPC > (4 bytes)
        constexpr std::uint16_t m_bInQuery = 0x850; // bool (1 bytes)
        constexpr std::uint16_t m_bSelectionChangedInDataUpdate = 0x851; // bool (1 bytes)
        constexpr std::uint16_t m_flQueryInhibitingActionTime = 0x8b8; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flQueryInhibitDuration = 0x8bc; // float32 (4 bytes)
        constexpr std::uint16_t m_RingedEntities = 0x8c0; // CUtlVector< CHandle< C_BaseEntity > > (24 bytes)
        constexpr std::uint16_t m_ActiveRingOwners = 0x8d8; // CUtlVector< CHandle< C_BaseEntity > > (24 bytes)
        constexpr std::uint16_t m_bOverridingQuery = 0x8f0; // bool (1 bytes)
        constexpr std::uint16_t m_flLastAutoRepeatTime = 0x8f8; // float32 (4 bytes)
        constexpr std::uint16_t m_flConsumeDoubleclickTime = 0x8fc; // float32 (4 bytes)
        constexpr std::uint16_t m_LightInfoWeatherEffect = 0x900; // CUtlString (8 bytes)
        constexpr std::uint16_t m_bPreviousWasLightInfoWeather = 0x908; // bool (1 bytes)
        constexpr std::uint16_t m_MapDefaultWeatherEffect = 0x910; // CUtlString (8 bytes)
        constexpr std::uint16_t m_bMapUsesDynamicWeather = 0x918; // bool (1 bytes)
        constexpr std::uint16_t m_vecSuggestedWardLocationEffects = 0x958; // CUtlVector< ParticleIndex_t > (24 bytes)
        constexpr std::uint16_t m_pSmartCastNPC = 0x970; // C_DOTA_BaseNPC* (8 bytes)
        constexpr std::uint16_t m_nTeamSprayParticleIndex = 0x978; // ParticleIndex_t (4 bytes)
        constexpr std::uint16_t m_bIsNextCastOrderFromMouseClick = 0x97c; // bool (1 bytes)
        constexpr std::uint16_t m_iCursor = 0x9b0; // int32[2] (8 bytes)
        constexpr std::uint16_t m_iSpectatorClickBehavior = 0x9b8; // int32 (4 bytes)
        constexpr std::uint16_t m_flAspectRatio = 0x9bc; // float32 (4 bytes)
        constexpr std::uint16_t m_hSpectatorQueryUnit = 0x9c0; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_iStatsPanel = 0x9c4; // int32 (4 bytes)
        constexpr std::uint16_t m_iShopPanel = 0x9c8; // int32 (4 bytes)
        constexpr std::uint16_t m_iShopViewMode = 0x9cc; // ShopItemViewMode_t (4 bytes)
        constexpr std::uint16_t m_iStatsDropdownCategory = 0x9d0; // int32 (4 bytes)
        constexpr std::uint16_t m_iStatsDropdownSort = 0x9d4; // int32 (4 bytes)
        constexpr std::uint16_t m_szShopString = 0x9d8; // char[64] (64 bytes)
        constexpr std::uint16_t m_vecClientQuickBuyState = 0xa18; // C_UtlVectorEmbeddedNetworkVar< ClientQuickBuyItemState > (80 bytes)
        constexpr std::uint16_t m_bInShowCaseMode = 0xa68; // bool (1 bytes)
        constexpr std::uint16_t m_flCameraZoomAmount = 0xa6c; // float32 (4 bytes)
        constexpr std::uint16_t m_iHighPriorityScore = 0xa70; // int32 (4 bytes)
        constexpr std::uint16_t m_quickBuyItems = 0xa74; // AbilityID_t[9] (36 bytes)
        constexpr std::uint16_t m_quickBuyIsPurchasable = 0xa98; // bool[9] (9 bytes)
        constexpr std::uint16_t m_flFrameTime = 0xaa4; // float32 (4 bytes)
        constexpr std::uint16_t m_flFrameTimeStdDev = 0xaa8; // float32 (4 bytes)
        constexpr std::uint16_t m_flUnfilteredFrameTime = 0xaac; // float32 (4 bytes)
        constexpr std::uint16_t m_NeutralCampAlarms = 0xab0; // CUtlVector< NeutralCampStackPullAlarm_t > (24 bytes)
        constexpr std::uint16_t m_iPrevCursor = 0xac8; // int32[2] (8 bytes)
        constexpr std::uint16_t m_iPositionHistoryTail = 0xb70; // int32 (4 bytes)
        constexpr std::uint16_t m_iMusicStatus = 0xb74; // int32 (4 bytes)
        constexpr std::uint16_t m_iPreviousMusicStatus = 0xb78; // int32 (4 bytes)
        constexpr std::uint16_t m_bRequestedInventory = 0xb7c; // bool (1 bytes)
        constexpr std::uint16_t m_flMusicOperatorVals = 0xb80; // float32[3] (12 bytes)
        constexpr std::uint16_t m_iMusicOperatorVals = 0xb8c; // int32[4] (16 bytes)
        constexpr std::uint16_t m_ControlGroups = 0xba0; // CUtlVector< sControlGroupElem >[10] (240 bytes)
        constexpr std::uint16_t m_pkvControlGroupKV = 0xc90; // KeyValues* (8 bytes)
        constexpr std::uint16_t m_flAltHeldStartTime = 0xcf0; // float32 (4 bytes)
    }
    namespace C_DOTA_BaseNPC {
        constexpr std::uint16_t m_bIsPhantom = 0xa18; // bool (1 bytes)
        constexpr std::uint16_t m_iUnitType = 0xa1c; // uint32 (4 bytes)
        constexpr std::uint16_t m_bSelectionRingVisible = 0xa30; // bool (1 bytes)
        constexpr std::uint16_t m_iCurrentLevel = 0xa34; // int32 (4 bytes)
        constexpr std::uint16_t m_bIsAncient = 0xa38; // bool (1 bytes)
        constexpr std::uint16_t m_bIsBossCreature = 0xa39; // bool (1 bytes)
        constexpr std::uint16_t m_bStolenScepter = 0xa3a; // bool (1 bytes)
        constexpr std::uint16_t m_bIsNeutralUnitType = 0xa3b; // bool (1 bytes)
        constexpr std::uint16_t m_bSelectOnSpawn = 0xa3c; // bool (1 bytes)
        constexpr std::uint16_t m_bCachedReplicatedMorphlingIllusion = 0xa3d; // bool (1 bytes)
        constexpr std::uint16_t m_bIgnoreAddSummonedToSelection = 0xa3e; // bool (1 bytes)
        constexpr std::uint16_t m_bConsideredHero = 0xa3f; // bool (1 bytes)
        constexpr std::uint16_t m_bUsesConstantGesture = 0xa40; // bool (1 bytes)
        constexpr std::uint16_t m_bUseHeroAbilityNumbers = 0xa41; // bool (1 bytes)
        constexpr std::uint16_t m_bHasSharedAbilities = 0xa42; // bool (1 bytes)
        constexpr std::uint16_t m_bIsSummoned = 0xa43; // bool (1 bytes)
        constexpr std::uint16_t m_bCanBeDominated = 0xa44; // bool (1 bytes)
        constexpr std::uint16_t m_bHasUpgradeableAbilities = 0xa45; // bool (1 bytes)
        constexpr std::uint16_t m_flHealthThinkRegen = 0xa48; // float32 (4 bytes)
        constexpr std::uint16_t m_iIsControllableByPlayer64 = 0xa50; // uint64 (8 bytes)
        constexpr std::uint16_t m_nHealthBarOffsetOverride = 0xa58; // int32 (4 bytes)
        constexpr std::uint16_t m_bCanRespawn = 0xa5c; // bool (1 bytes)
        constexpr std::uint16_t m_iAttackRange = 0xa60; // int32 (4 bytes)
        constexpr std::uint16_t m_colorGemColor = 0xa64; // Color (4 bytes)
        constexpr std::uint16_t m_bHasColorGem = 0xa68; // bool (1 bytes)
        constexpr std::uint16_t m_nFXDeniableIndex = 0xa6c; // ParticleIndex_t (4 bytes)
        constexpr std::uint16_t m_iMoveSpeed = 0xa70; // int32 (4 bytes)
        constexpr std::uint16_t m_iBaseAttackSpeed = 0xa74; // int32 (4 bytes)
        constexpr std::uint16_t m_flBaseAttackTime = 0xa78; // float32 (4 bytes)
        // NetworkChangeCallback: OnUnitNameIndexChanged
        constexpr std::uint16_t m_iUnitNameIndex = 0xa7c; // int32 (4 bytes)
        constexpr std::uint16_t m_iHealthBarOffset = 0xa80; // int32 (4 bytes)
        constexpr std::uint16_t m_iHealthBarHighlightColor = 0xa84; // Color (4 bytes)
        constexpr std::uint16_t m_flMana = 0xa88; // float32 (4 bytes)
        constexpr std::uint16_t m_flMaxMana = 0xa8c; // float32 (4 bytes)
        constexpr std::uint16_t m_flManaThinkRegen = 0xa90; // float32 (4 bytes)
        constexpr std::uint16_t m_iBKBChargesUsed = 0xa94; // int32 (4 bytes)
        constexpr std::uint16_t m_iAeonChargesUsed = 0xa98; // int32 (4 bytes)
        constexpr std::uint16_t m_flRefresherUseTime = 0xa9c; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flRefresherLastCooldown = 0xaa0; // float32 (4 bytes)
        constexpr std::uint16_t m_flLastDealtDamageTime = 0xaa4; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_iBotDebugData = 0xaa8; // int32 (4 bytes)
        constexpr std::uint16_t m_bIsIllusion = 0xaac; // bool (1 bytes)
        constexpr std::uint16_t m_bHasClientSeenIllusionModifier = 0xaad; // bool (1 bytes)
        constexpr std::uint16_t m_hAbilities = 0xab0; // CHandle< C_BaseEntity >[35] (140 bytes)
        constexpr std::uint16_t m_flInvisibilityLevel = 0xb3c; // float32 (4 bytes)
        constexpr std::uint16_t m_flHullRadius = 0xb40; // float32 (4 bytes)
        constexpr std::uint16_t m_flCollisionPadding = 0xb44; // float32 (4 bytes)
        constexpr std::uint16_t m_flRingRadius = 0xb48; // float32 (4 bytes)
        constexpr std::uint16_t m_flProjectileCollisionSize = 0xb4c; // float32 (4 bytes)
        constexpr std::uint16_t m_iszUnitName = 0xb50; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iszParticleFolder = 0xb58; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iszSoundSet = 0xb60; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iszSelectionGroup = 0xb68; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iszVoiceFile = 0xb70; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iszGameSoundsFile = 0xb78; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iszVoiceBackgroundSound = 0xb80; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iszIdleSoundLoop = 0xb88; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_szUnitLabel = 0xb90; // CUtlString (8 bytes)
        constexpr std::uint16_t m_szScaleset = 0xb98; // CUtlString (8 bytes)
        constexpr std::uint16_t m_nUnitLabelIndex = 0xba0; // uint8 (1 bytes)
        constexpr std::uint16_t m_strAnimationModifier = 0xba8; // CUtlString (8 bytes)
        constexpr std::uint16_t m_TerrainSpecificFootstepEffect = 0xbb0; // CUtlString (8 bytes)
        constexpr std::uint16_t m_bUseCustomTerrainWeatherEffect = 0xbb8; // bool (1 bytes)
        constexpr std::uint16_t m_bHasClientSoundReplacement = 0xbb9; // bool (1 bytes)
        constexpr std::uint16_t m_bHasClientReplacementParticle = 0xbba; // bool (1 bytes)
        constexpr std::uint16_t m_bResourcesLoaded = 0xbc4; // bool (1 bytes)
        constexpr std::uint16_t m_flTauntCooldown = 0xbc8; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flTauntCooldown2 = 0xbcc; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_iCurShop = 0xbd0; // DOTA_SHOP_TYPE (4 bytes)
        constexpr std::uint16_t m_szCurShopEntName = 0xbd8; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iDayTimeVisionRange = 0xbe0; // int32 (4 bytes)
        constexpr std::uint16_t m_iNightTimeVisionRange = 0xbe4; // int32 (4 bytes)
        // NetworkChangeCallback: OnDamageMinChanged
        constexpr std::uint16_t m_iDamageMin = 0xbe8; // int32 (4 bytes)
        // NetworkChangeCallback: OnDamageMaxChanged
        constexpr std::uint16_t m_iDamageMax = 0xbec; // int32 (4 bytes)
        constexpr std::uint16_t m_iDamageBonus = 0xbf0; // int32 (4 bytes)
        constexpr std::uint16_t m_iTaggedAsVisibleByTeam = 0xbf4; // int32 (4 bytes)
        constexpr std::uint16_t m_ModifierManager = 0xbf8; // CDOTA_ModifierManager (632 bytes)
        constexpr std::uint16_t m_Inventory = 0xe70; // C_DOTA_UnitInventory (176 bytes)
        // NetworkChangeCallback: OnUnitStateChanged
        constexpr std::uint16_t m_nUnitState64 = 0xf28; // uint64 (8 bytes)
        constexpr std::uint16_t m_nUnitDebuffState = 0xf38; // uint64 (8 bytes)
        constexpr std::uint16_t m_bHasInventory = 0xf40; // bool (1 bytes)
        constexpr std::uint16_t m_iAcquisitionRange = 0xf44; // int32 (4 bytes)
        constexpr std::uint16_t m_FoWViewID = 0xf48; // int32 (4 bytes)
        constexpr std::uint16_t m_iPrevHealthPct = 0xf4c; // int32 (4 bytes)
        constexpr std::uint16_t m_iPrevLifeState = 0xf50; // int32 (4 bytes)
        constexpr std::uint16_t m_iPrevTeam = 0xf54; // int32 (4 bytes)
        constexpr std::uint16_t m_bPrevProvidesVision = 0xf58; // bool (1 bytes)
        constexpr std::uint16_t m_nPrevControllableMask = 0xf60; // uint64 (8 bytes)
        constexpr std::uint16_t m_TagTime = 0xf70; // CountdownTimer (24 bytes)
        constexpr std::uint16_t m_ClickedTime = 0xf88; // CountdownTimer (24 bytes)
        constexpr std::uint16_t m_flIdleRunPoseStartTime = 0xfa0; // GameTime_t[2] (8 bytes)
        constexpr std::uint16_t m_flIdleRunPoseDuration = 0xfa8; // float32[2] (8 bytes)
        constexpr std::uint16_t m_bAnimationTransitionActive = 0xfb0; // bool (1 bytes)
        constexpr std::uint16_t m_nAnimationTransitionPoseParameters = 0xfb4; // int32[2] (8 bytes)
        constexpr std::uint16_t m_nAnimationTransitionInjuredPoseParameters = 0xfbc; // int32[2] (8 bytes)
        constexpr std::uint16_t m_nAnimationTransitionAggressivePoseParameters = 0xfc4; // int32[2] (8 bytes)
        constexpr std::uint16_t m_flTimeSinceLastAbilityNag = 0x1028; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_iAttackCapabilities = 0x102c; // int32 (4 bytes)
        constexpr std::uint16_t m_iSpecialAbility = 0x1030; // int32 (4 bytes)
        constexpr std::uint16_t m_iMoveCapabilities = 0x1034; // int32 (4 bytes)
        constexpr std::uint16_t m_nPlayerOwnerID = 0x1038; // PlayerID_t (4 bytes)
        constexpr std::uint16_t m_flLastDamageTime = 0x103c; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flLastAttackTime = 0x1040; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_iszMinimapIcon = 0x1048; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_flMinimapIconSize = 0x1058; // float32 (4 bytes)
        constexpr std::uint16_t m_bMinimapDisableTint = 0x105c; // bool (1 bytes)
        constexpr std::uint16_t m_bMinimapDisableRotation = 0x105d; // bool (1 bytes)
        constexpr std::uint16_t m_colorHeroGlow = 0x105e; // Color (4 bytes)
        constexpr std::uint16_t m_iNearShopMask = 0x1064; // int32 (4 bytes)
        constexpr std::uint16_t m_nPoseParameterTurn = 0x1068; // int32 (4 bytes)
        constexpr std::uint16_t m_nPoseParameterRun = 0x106c; // int32 (4 bytes)
        constexpr std::uint16_t m_flLean = 0x1070; // float32 (4 bytes)
        constexpr std::uint16_t m_flRun = 0x1074; // float32 (4 bytes)
        constexpr std::uint16_t m_anglediff = 0x1078; // int32 (4 bytes)
        constexpr std::uint16_t m_bInfoKeyActive = 0x107c; // bool (1 bytes)
        constexpr std::uint16_t m_bNewUpdateAssetModifiersNetworked = 0x107d; // bool (1 bytes)
        constexpr std::uint16_t m_nAssetModifiersLastUpdatedTick = 0x1080; // GameTick_t (4 bytes)
        constexpr std::uint16_t m_bSuppressGlow = 0x1084; // bool (1 bytes)
        constexpr std::uint16_t m_bWasSinking = 0x1085; // bool (1 bytes)
        constexpr std::uint16_t m_flRangeDisplayDist = 0x1088; // float32 (4 bytes)
        constexpr std::uint16_t m_szDefaultIdle = 0x1248; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_szDefaultRareIdle = 0x1250; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_damagetimer = 0x1258; // CountdownTimer (24 bytes)
        constexpr std::uint16_t m_vRenderOrigin = 0x1270; // Vector (12 bytes)
        constexpr std::uint16_t m_fZDelta = 0x127c; // float32 (4 bytes)
        constexpr std::uint16_t m_flDeathTime = 0x1280; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_bBaseStatsChanged = 0x1284; // bool (1 bytes)
        constexpr std::uint16_t m_bNeedsSoundEmitterRefresh = 0x1285; // bool (1 bytes)
        constexpr std::uint16_t m_flPhysicalArmorValue = 0x1288; // float32 (4 bytes)
        constexpr std::uint16_t m_flMagicalResistanceValue = 0x128c; // float32 (4 bytes)
        constexpr std::uint16_t m_nPrevSequenceParity = 0x1290; // int32 (4 bytes)
        constexpr std::uint16_t m_flPrevInvisLevel = 0x1338; // float32 (4 bytes)
        constexpr std::uint16_t m_nOriginalModelIndex = 0x1340; // CStrongHandle< InfoForResourceTypeCModel > (8 bytes)
        constexpr std::uint16_t m_nClientOriginalModelIndex = 0x1348; // CStrongHandle< InfoForResourceTypeCModel > (8 bytes)
        constexpr std::uint16_t m_nClientReplacementModelIndex = 0x1350; // CStrongHandle< InfoForResourceTypeCModel > (8 bytes)
        constexpr std::uint16_t m_bClientReplacementModelNeedsRebuild = 0x1358; // bool (1 bytes)
        constexpr std::uint16_t m_nClientReplacementModelReloadCount = 0x135c; // int32 (4 bytes)
        // NetworkChangeCallback: OnUnitModelVariantChanged
        constexpr std::uint16_t m_nUnitModelVariant = 0x1360; // int8 (1 bytes)
        constexpr std::uint16_t m_nUnitModelVariantCount = 0x1361; // int8 (1 bytes)
        constexpr std::uint16_t m_iPrevSequence = 0x1364; // int32 (4 bytes)
        constexpr std::uint16_t m_pLastWeatherEffectName = 0x1368; // char* (8 bytes)
        constexpr std::uint16_t m_VoiceBackgroundSoundTimer = 0x1378; // CountdownTimer (24 bytes)
        constexpr std::uint16_t m_bIsWaitingToSpawn = 0x1390; // bool (1 bytes)
        constexpr std::uint16_t m_nTotalDamageTaken = 0x1398; // int64 (8 bytes)
        constexpr std::uint16_t m_flManaRegen = 0x13a0; // float32 (4 bytes)
        constexpr std::uint16_t m_flHealthRegen = 0x13a4; // float32 (4 bytes)
        constexpr std::uint16_t m_bIsMoving = 0x13a8; // bool (1 bytes)
        constexpr std::uint16_t m_fRevealRadius = 0x13ac; // float32 (4 bytes)
        constexpr std::uint16_t m_bCanUseWards = 0x13b0; // bool (1 bytes)
        constexpr std::uint16_t m_bCanUseAllItems = 0x13b1; // bool (1 bytes)
        constexpr std::uint16_t m_iXPBounty = 0x13b4; // int32 (4 bytes)
        constexpr std::uint16_t m_iXPBountyExtra = 0x13b8; // int32 (4 bytes)
        constexpr std::uint16_t m_iGoldBountyMin = 0x13bc; // int32 (4 bytes)
        constexpr std::uint16_t m_iGoldBountyMax = 0x13c0; // int32 (4 bytes)
        constexpr std::uint16_t m_hGoalEntity = 0x13c4; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_hNeutralSpawner = 0x13c8; // CHandle< C_DOTA_NeutralSpawner > (4 bytes)
        constexpr std::uint16_t m_hClientOverrideMaterial = 0x13d0; // CStrongHandle< InfoForResourceTypeIMaterial2 > (8 bytes)
        constexpr std::uint16_t m_bCombinerMaterialOverrideListChanged = 0x13d8; // bool (1 bytes)
        constexpr std::uint16_t m_nBaseModelMeshCount = 0x13dc; // int32 (4 bytes)
        constexpr std::uint16_t m_combinerMaterialOverrideList = 0x13e0; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > > (24 bytes)
        constexpr std::uint16_t m_nArcanaLevel = 0x13f8; // int8 (1 bytes)
        constexpr std::uint16_t m_nDefaultArcanaLevel = 0x13f9; // int8 (1 bytes)
        constexpr std::uint16_t m_defaultColorGemColor = 0x13fa; // Color (4 bytes)
        constexpr std::uint16_t m_bHasBuiltWearableSpawnList = 0x1418; // bool (1 bytes)
        constexpr std::uint16_t m_bHasCostume = 0x1419; // bool (1 bytes)
        constexpr std::uint16_t m_NetworkActivity = 0x1538; // int32 (4 bytes)
        constexpr std::uint16_t m_PrevNetworkActivity = 0x153c; // int32 (4 bytes)
        constexpr std::uint16_t m_NetworkSequenceIndex = 0x1540; // int32 (4 bytes)
        constexpr std::uint16_t m_bShouldDoFlyHeightVisual = 0x1544; // bool (1 bytes)
        constexpr std::uint16_t m_flStartSequenceCycle = 0x1548; // float32 (4 bytes)
        constexpr std::uint16_t m_ActivityModifiers = 0x1550; // CUtlVector< CUtlSymbol > (24 bytes)
        constexpr std::uint16_t m_hBackgroundSceneEnt = 0x1568; // CHandle< C_SceneEntity > (4 bytes)
        constexpr std::uint16_t m_hSpeakingSceneEnt = 0x156c; // CHandle< C_SceneEntity > (4 bytes)
        constexpr std::uint16_t m_hOldWearables = 0x1580; // CUtlVector< CHandle< C_EconWearable > > (24 bytes)
        constexpr std::uint16_t m_hOldWearableSkins = 0x1598; // CUtlVector< CUtlStringToken > (24 bytes)
        constexpr std::uint16_t m_CustomHealthLabel = 0x15b0; // char[256] (256 bytes)
        constexpr std::uint16_t m_CustomHealthLabelColor = 0x16b0; // Color (4 bytes)
        constexpr std::uint16_t m_nWearableDefIndex = 0x16b4; // item_definition_index_t (4 bytes)
        constexpr std::uint16_t m_gibTintColor = 0x16b9; // Color (4 bytes)
        constexpr std::uint16_t m_bForceMaterialCombine = 0x16bd; // bool (1 bytes)
        constexpr std::uint16_t m_bShouldDrawParticlesWhileHidden = 0x16be; // bool (1 bytes)
        constexpr std::uint16_t m_bIsClientThinkPending = 0x16bf; // bool (1 bytes)
        constexpr std::uint16_t m_bActivityModifiersDirty = 0x16c0; // bool (1 bytes)
        constexpr std::uint16_t m_bUnitModelVariantChanged = 0x16c1; // bool (1 bytes)
        constexpr std::uint16_t m_bWearablesAreTaunting = 0x16c2; // bool (1 bytes)
        constexpr std::uint16_t m_bShowCannotBeDisabledIcon = 0x16d8; // bool (1 bytes)
    }
    namespace C_DOTA_BaseNPC_Hero {
        constexpr std::uint16_t m_iCurrentXP = 0x1700; // int32 (4 bytes)
        // NetworkChangeCallback: OnAbilityPointsChanged
        constexpr std::uint16_t m_iAbilityPoints = 0x1704; // int32 (4 bytes)
        constexpr std::uint16_t m_flRespawnTime = 0x1708; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flRespawnTimePenalty = 0x170c; // float32 (4 bytes)
        // NetworkChangeCallback: OnBaseStatChanged
        constexpr std::uint16_t m_flStrength = 0x1710; // float32 (4 bytes)
        // NetworkChangeCallback: OnBaseStatChanged
        constexpr std::uint16_t m_flAgility = 0x1714; // float32 (4 bytes)
        // NetworkChangeCallback: OnBaseStatChanged
        constexpr std::uint16_t m_flIntellect = 0x1718; // float32 (4 bytes)
        // NetworkChangeCallback: OnBaseStatChanged
        constexpr std::uint16_t m_flStrengthTotal = 0x171c; // float32 (4 bytes)
        // NetworkChangeCallback: OnBaseStatChanged
        constexpr std::uint16_t m_flAgilityTotal = 0x1720; // float32 (4 bytes)
        // NetworkChangeCallback: OnBaseStatChanged
        constexpr std::uint16_t m_flIntellectTotal = 0x1724; // float32 (4 bytes)
        constexpr std::uint16_t m_flDeathTime = 0x1728; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_iRecentDamage = 0x172c; // int32 (4 bytes)
        constexpr std::uint16_t m_fPainFactor = 0x1730; // float32 (4 bytes)
        constexpr std::uint16_t m_fTargetPainFactor = 0x1734; // float32 (4 bytes)
        constexpr std::uint16_t m_bLifeState = 0x1738; // bool (1 bytes)
        constexpr std::uint16_t m_nFXStunIndex = 0x173c; // ParticleIndex_t (4 bytes)
        constexpr std::uint16_t m_nFXSilenceIndex = 0x1740; // ParticleIndex_t (4 bytes)
        constexpr std::uint16_t m_nFXDeathIndex = 0x1744; // ParticleIndex_t (4 bytes)
        constexpr std::uint16_t m_iPlayerID = 0x1768; // PlayerID_t (4 bytes)
        constexpr std::uint16_t m_hReplicatingOtherHeroModel = 0x176c; // CHandle< C_DOTA_BaseNPC_Hero > (4 bytes)
        constexpr std::uint16_t m_bReincarnating = 0x1770; // bool (1 bytes)
        constexpr std::uint16_t m_bCustomKillEffect = 0x1771; // bool (1 bytes)
        constexpr std::uint16_t m_flSpawnedAt = 0x1774; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_bScriptDisableRespawns = 0x1778; // bool (1 bytes)
        constexpr std::uint16_t m_iPrimaryAttribute = 0x177c; // int32 (4 bytes)
        constexpr std::uint16_t m_nLastDrawnHealth = 0x1780; // int32 (4 bytes)
        constexpr std::uint16_t m_flHurtAmount = 0x1784; // float32 (4 bytes)
        constexpr std::uint16_t m_flLastHurtTime = 0x1788; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flHurtDecayRate = 0x178c; // float32 (4 bytes)
        constexpr std::uint16_t m_flLastHealTime = 0x1790; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flLastTreeShakeTime = 0x1794; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_CenterOnHeroCooldownTimer = 0x1798; // CountdownTimer (24 bytes)
        constexpr std::uint16_t m_CombinedModels = 0x19b8; // CStrongHandle< InfoForResourceTypeCModel >[4] (32 bytes)
        constexpr std::uint16_t m_nCurrentCombinedModelIndex = 0x19d8; // int32 (4 bytes)
        constexpr std::uint16_t m_nPendingCombinedModelIndex = 0x19dc; // int32 (4 bytes)
        constexpr std::uint16_t m_iHeroID = 0x19e0; // int32 (4 bytes)
        constexpr std::uint16_t m_flCheckLegacyItemsAt = 0x19e4; // float32 (4 bytes)
        constexpr std::uint16_t m_bDisplayAdditionalHeroes = 0x19e8; // bool (1 bytes)
        constexpr std::uint16_t m_CombinedParticleModels = 0x19f8; // CStrongHandle< InfoForResourceTypeCModel >[4] (32 bytes)
        constexpr std::uint16_t m_vecAttachedParticleIndeces = 0x1a18; // CUtlVector< ParticleIndex_t > (24 bytes)
        constexpr std::uint16_t m_hPets = 0x1a30; // CUtlVector< CHandle< C_BaseEntity > > (24 bytes)
        constexpr std::uint16_t m_nKillStreakFX = 0x1a48; // ParticleIndex_t (4 bytes)
        constexpr std::uint16_t m_nKillStreakFXTier = 0x1a4c; // int32 (4 bytes)
    }
    namespace C_EconEntity {
        constexpr std::uint16_t m_AttributeManager = 0x960; // CAttributeContainer (296 bytes)
        constexpr std::uint16_t m_bClientside = 0xa88; // bool (1 bytes)
        constexpr std::uint16_t m_nDisableMode = 0xa8c; // EconEntityParticleDisableMode_t (4 bytes)
        constexpr std::uint16_t m_bParticleSystemsCreated = 0xa90; // bool (1 bytes)
        constexpr std::uint16_t m_bForceDestroyAttachedParticlesImmediately = 0xa91; // bool (1 bytes)
        constexpr std::uint16_t m_vecAttachedParticles = 0xa98; // CUtlVector< C_EconEntity::AttachedParticleInfo_t > (24 bytes)
        constexpr std::uint16_t m_hViewmodelAttachment = 0xab0; // CHandle< CBaseAnimatingActivity > (4 bytes)
        constexpr std::uint16_t m_iOldTeam = 0xab4; // int32 (4 bytes)
        constexpr std::uint16_t m_bAttachmentDirty = 0xab8; // bool (1 bytes)
        constexpr std::uint16_t m_iOldStyle = 0xab9; // style_index_t (1 bytes)
        constexpr std::uint16_t m_hOldProvidee = 0xabc; // CHandle< C_BaseEntity > (4 bytes)
        constexpr std::uint16_t m_vecAttachedModels = 0xac0; // CUtlVector< C_EconEntity::AttachedModelData_t > (24 bytes)
    }
    namespace CDOTA_Buff {
        constexpr std::uint16_t m_name = 0x28; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_szModifierAura = 0x38; // CUtlSymbolLarge (8 bytes)
        constexpr std::uint16_t m_iSerialNumber = 0x48; // int32 (4 bytes)
        constexpr std::uint16_t m_iStringIndex = 0x4c; // int32 (4 bytes)
        constexpr std::uint16_t m_iIndex = 0x50; // int32 (4 bytes)
        constexpr std::uint16_t m_flCreationTime = 0x54; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_iCreationFrame = 0x58; // int32 (4 bytes)
        constexpr std::uint16_t m_flLastAppliedTime = 0x5c; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flDuration = 0x60; // float32 (4 bytes)
        constexpr std::uint16_t m_flDieTime = 0x64; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_hCaster = 0x68; // CHandle< CBaseEntity > (4 bytes)
        constexpr std::uint16_t m_hAbility = 0x6c; // CHandle< CBaseEntity > (4 bytes)
        constexpr std::uint16_t m_hParent = 0x70; // CHandle< CBaseEntity > (4 bytes)
        constexpr std::uint16_t m_hAuraOwner = 0x74; // CHandle< CBaseEntity > (4 bytes)
        constexpr std::uint16_t m_iStackCount = 0x78; // int32 (4 bytes)
        constexpr std::uint16_t m_iAuraSearchTeam = 0x7c; // int16 (2 bytes)
        constexpr std::uint16_t m_iAuraSearchType = 0x7e; // int16 (2 bytes)
        constexpr std::uint16_t m_iAuraSearchFlags = 0x80; // int32 (4 bytes)
        constexpr std::uint16_t m_iAuraRadius = 0x84; // int32 (4 bytes)
        constexpr std::uint16_t m_iTeam = 0x88; // int32 (4 bytes)
        constexpr std::uint16_t m_iAttributes = 0x8c; // int32 (4 bytes)
        constexpr std::uint16_t m_iPaddingToMakeSchemaHappy2 = 0x90; // int16 (2 bytes)
        constexpr std::uint16_t m_bPurgedDestroy = 0x93; // bool (1 bytes)
        constexpr std::uint16_t m_flPreviousTick = 0x94; // GameTime_t (4 bytes)
        constexpr std::uint16_t m_flThinkInterval = 0x98; // float32 (4 bytes)
        constexpr std::uint16_t m_flThinkTimeAccumulator = 0x9c; // float32 (4 bytes)
        constexpr std::uint16_t m_iParticles = 0xa0; // CUtlVector< CDOTA_BuffParticle > (24 bytes)
        constexpr std::uint16_t m_hAuraUnits = 0xb8; // CUtlVector< CHandle< CBaseEntity > > (24 bytes)
        constexpr std::uint16_t m_hScriptScope = 0x11e0; // HSCRIPT (8 bytes)
    }
}
